"use strict";

var burg = {
  burger: document.getElementById('burger'),
  burgWindow: document.getElementById('burgMenuId'),
  tap: function tapedMenu() {
    console.log(this.burgWindow);

    if (this.burgWindow.className === 'burgerMenu_deactived') {
      this.burgWindow.classList.remove('burgerMenu_deactived');
      this.burgWindow.classList.add('burgerMenu_active');
    } else {
      this.burgWindow.classList.add('burgerMenu_deactived');
      this.burgWindow.classList.remove('burgerMenu_active');
    }
  },
  makeB: function makeButton() {
    this.burgWindow.onclick = function () {
      return burg.tap();
    }, this.burger.onclick = function () {
      return burg.tap();
    };
  }
};
burg.makeB();
"use strict";

var scroll, timer, anchor, box, b;
var makeScrolling = {
  makeScrollBars: function makeScrollBars() {
    document.getElementById('headerScrollBottom').onclick = this.triangleScrolling;
    document.getElementById('future__scrollId').onclick = this.scrollToTop;
    document.getElementById('security__scrollId').onclick = this.scrollToTop;
  },
  triangleScrolling: function triangleScrolling() {
    scroll = window.pageYOffset;
    box = document.getElementById('future__mainId').getBoundingClientRect();
    anchor = box.top + scroll;

    function go() {
      if (scroll < anchor - 5) {
        window.scrollTo(0, scroll);
        scroll = scroll + 15 * Math.sin(0.1 + 3 * scroll / anchor);
        timer = setTimeout(go, 5);
      } else {
        clearTimeout(timer);
        window.scrollTo(0, anchor);
      }
    }

    return go();
  },
  scrollToTop: function scrollToTop() {
    scroll = window.pageYOffset;
    anchor = scroll;

    function go() {
      if (scroll > 0) {
        window.scrollTo(0, scroll);
        scroll = scroll - 25 * Math.sin(0.1 + 3 * scroll / anchor);
        timer = setTimeout(go, 5);
      } else {
        clearTimeout(timer);
        window.scrollTo(0, 0);
      }
    }

    return go();
  }
};
makeScrolling.makeScrollBars();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1cmdlci5qcyIsInNjcm9sbC5qcyJdLCJuYW1lcyI6WyJidXJnIiwiYnVyZ2VyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImJ1cmdXaW5kb3ciLCJ0YXAiLCJ0YXBlZE1lbnUiLCJjb25zb2xlIiwibG9nIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwibWFrZUIiLCJtYWtlQnV0dG9uIiwib25jbGljayIsInNjcm9sbCIsInRpbWVyIiwiYW5jaG9yIiwiYm94IiwiYiIsIm1ha2VTY3JvbGxpbmciLCJtYWtlU2Nyb2xsQmFycyIsInRyaWFuZ2xlU2Nyb2xsaW5nIiwic2Nyb2xsVG9Ub3AiLCJ3aW5kb3ciLCJwYWdlWU9mZnNldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImdvIiwic2Nyb2xsVG8iLCJNYXRoIiwic2luIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7QUFFQSxJQUFJQSxJQUFJLEdBQUc7QUFDVEMsRUFBQUEsTUFBTSxFQUFFQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FEQztBQUVUQyxFQUFBQSxVQUFVLEVBQUVGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixZQUF4QixDQUZIO0FBSVRFLEVBQUFBLEdBQUcsRUFBRSxTQUFTQyxTQUFULEdBQXFCO0FBQ3hCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLSixVQUFqQjs7QUFFQSxRQUFJLEtBQUtBLFVBQUwsQ0FBZ0JLLFNBQWhCLEtBQThCLHNCQUFsQyxFQUEwRDtBQUN4RCxXQUFLTCxVQUFMLENBQWdCTSxTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUMsc0JBQWpDO0FBQ0EsV0FBS1AsVUFBTCxDQUFnQk0sU0FBaEIsQ0FBMEJFLEdBQTFCLENBQThCLG1CQUE5QjtBQUNELEtBSEQsTUFHTztBQUNMLFdBQUtSLFVBQUwsQ0FBZ0JNLFNBQWhCLENBQTBCRSxHQUExQixDQUE4QixzQkFBOUI7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Y0FBZCIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbnZhciBidXJnID0ge1xyXG4gIGJ1cmdlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1cmdlcicpLFxyXG4gIGJ1cmdXaW5kb3c6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXJnTWVudUlkJyksXHJcblxyXG4gIHRhcDogZnVuY3Rpb24gdGFwZWRNZW51KCkge1xyXG4gICAgY29uc29sZS5sb2codGhpcy5idXJnV2luZG93KTtcclxuXHJcbiAgICBpZiAodGhpcy5idXJnV2luZG93LmNsYXNzTmFtZSA9PT0gJ2J1cmdlck1lbnVfZGVhY3RpdmVkJykge1xyXG4gICAgICB0aGlzLmJ1cmdXaW5kb3cuY2xhc3NMaXN0LnJlbW92ZSgnYnVyZ2VyTWVudV9kZWFjdGl2ZWQnKTtcclxuICAgICAgdGhpcy5idXJnV2luZG93LmNsYXNzTGlzdC5hZGQoJ2J1cmdlck1lbnVfYWN0aXZlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJ1cmdXaW5kb3cuY2xhc3NMaXN0LmFkZCgnYnVyZ2VyTWVudV9kZWFjdGl2ZWQnKTtcclxuICAgICAgdGhpcy5idXJnV2luZG93LmNsYXNzTGlzdC5yZW1vdmUoJ2J1cmdlck1lbnVfYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBtYWtlQjogZnVuY3Rpb24gbWFrZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuYnVyZ1dpbmRvdy5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gYnVyZy50YXAoKTtcclxuICAgIH0sIHRoaXMuYnVyZ2VyLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBidXJnLnRhcCgpO1xyXG4gICAgfTtcclxuICB9XHJcbn07XHJcbmJ1cmcubWFrZUIoKTsiLCJ2YXIgc2Nyb2xsLCB0aW1lciwgYW5jaG9yLCBib3gsIGI7XHJcblxyXG52YXIgbWFrZVNjcm9sbGluZyA9IHtcclxuXHJcbiAgICBtYWtlU2Nyb2xsQmFyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkZXJTY3JvbGxCb3R0b20nKS5vbmNsaWNrID0gdGhpcy50cmlhbmdsZVNjcm9sbGluZztcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnV0dXJlX19zY3JvbGxJZCcpLm9uY2xpY2sgPSB0aGlzLnNjcm9sbFRvVG9wO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWN1cml0eV9fc2Nyb2xsSWQnKS5vbmNsaWNrID0gdGhpcy5zY3JvbGxUb1RvcDsgIFxyXG4gICAgfSxcclxuXHJcbiAgICB0cmlhbmdsZVNjcm9sbGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgICAgICBib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnV0dXJlX19tYWluSWQnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIGFuY2hvciA9IGJveC50b3AgKyBzY3JvbGw7ICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBnbyAoKSB7XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGwgPCAoYW5jaG9yIC0gNSkpIHsgICAgXHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCxzY3JvbGwpXHJcbiAgICAgICAgICAgICAgICBzY3JvbGwgPSBzY3JvbGwgKyAxNSAqIE1hdGguc2luKDAuMSArIDMqc2Nyb2xsL2FuY2hvcik7XHJcbiAgICAgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZ28sNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsYW5jaG9yKVxyXG4gICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnbyAoKTtcclxuICAgICAgfSxcclxuXHJcbiAgICBzY3JvbGxUb1RvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgICAgICBhbmNob3IgPSBzY3JvbGw7XHJcbiAgICAgICAgZnVuY3Rpb24gZ28gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2Nyb2xsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsc2Nyb2xsKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbCAtIDI1ICogTWF0aC5zaW4oMC4xICsgMypzY3JvbGwvYW5jaG9yKTsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChnbyw1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ28gKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1ha2VTY3JvbGxpbmcubWFrZVNjcm9sbEJhcnMgKCk7Il19
